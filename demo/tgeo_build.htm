<!DOCTYPE html>
<html lang="en">
	<head>
      <!-- https://github.com/mrdoob/three.js/blob/master/examples/webgl_geometries.html -->
		<title>three.js model for TGeo object</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			body {
				font-family: Monospace;
				background-color: #000;
				margin: 0px;
				overflow: hidden;
			}
		</style>
	</head>
	<body>

      <!-- use three.js from threejs.org -->

		<!-- script src="https://threejs.org/build/three.js"></script-->

		<!--  script src="https://threejs.org/examples/js/Detector.js"></script-->
		<script src="https://threejs.org/examples/js/libs/stats.min.js"></script>
      
      <script src="../scripts/JSRootCore.js?2d&geom&onload=init" type="text/javascript"></script>

		<script>

			// if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

			var container, stats;

			var camera, scene, renderer;

			function init() {
			   
			   console.log('CALL INIT');

				container = document.createElement( 'div' );
				document.body.appendChild( container );

				camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 2000 );
				camera.position.y = 400;

				scene = new THREE.Scene();
				scene.add( new THREE.AmbientLight( 0x404040 ) );

				var light = new THREE.DirectionalLight( 0xffffff );
				light.position.set( 0, 1, 0 );
				scene.add( light );

				var material = new THREE.MeshLambertMaterial( { side: THREE.DoubleSide } );


				var object = new THREE.Mesh( new THREE.TetrahedronGeometry( 75, 0 ), material );
				// object.position.set( 200, 0, 200 );
				scene.add( object );

				renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );

				container.appendChild( renderer.domElement );

				stats = new Stats();
				container.appendChild( stats.dom );

				//

				window.addEventListener( 'resize', onWindowResize, false );

            animate();
			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			//

			function animate() {

				requestAnimationFrame( animate );

				render();
				stats.update();

			}

			function render() {

				var timer = Date.now() * 0.0001;

				camera.position.x = Math.cos( timer ) * 800;
				camera.position.z = Math.sin( timer ) * 800;

				camera.lookAt( scene.position );

				for ( var i = 0, l = scene.children.length; i < l; i ++ ) {

					var object = scene.children[ i ];

					object.rotation.x = timer * 5;
					object.rotation.y = timer * 2.5;

				}

				renderer.render( scene, camera );

			}

		</script>

	</body>
</html>
